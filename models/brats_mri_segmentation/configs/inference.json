{
    "imports": [
        "$import glob",
        "$import numpy",
        "$import os"
    ],
    "bundle_root": ".",
    "image_key": "image",
    "ckpt_dir": "$@bundle_root + '/models'",
    "output_dir": "$@bundle_root + '/eval'",
    "output_ext": ".nii.gz",
    "output_dtype": "uint8",
    "output_postfix": "seg",
    "separate_folder": true,
    "data_list_file_path": "$@bundle_root + '/configs/datalist.json'",
    "dataset_dir": "/workspace/data/medical/brats2018challenge",
    "test_datalist": "$monai.data.load_decathlon_datalist(@data_list_file_path, data_list_key='testing', base_dir=@dataset_dir)",
    "device": "$torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
    "amp": true,
    "network_def": {
        "_target_": "SegResNet",
        "blocks_down": [
            1,
            2,
            2,
            4
        ],
        "blocks_up": [
            1,
            1,
            1
        ],
        "init_filters": 16,
        "in_channels": 4,
        "out_channels": 3,
        "dropout_prob": 0.2
    },
    "network": "$@network_def.to(@device)",
    "preprocessing": {
        "_target_": "Compose",
        "transforms": [
            {
                "_target_": "LoadImaged",
                "keys": "@image_key",
                "image_only": false
            },
            {
                "_target_": "NormalizeIntensityd",
                "keys": "@image_key",
                "nonzero": true,
                "channel_wise": true
            }
        ]
    },
    "dataset": {
        "_target_": "Dataset",
        "data": "@test_datalist",
        "transform": "@preprocessing"
    },
    "dataloader": {
        "_target_": "DataLoader",
        "dataset": "@dataset",
        "batch_size": 1,
        "shuffle": true,
        "num_workers": 4
    },
    "inferer": {
        "_target_": "SlidingWindowInferer",
        "roi_size": [
            240,
            240,
            160
        ],
        "sw_batch_size": 1,
        "overlap": 0.5
    },
    "postprocessing": {
        "_target_": "Compose",
        "transforms": [
            {
                "_target_": "Activationsd",
                "keys": "@image_key",
                "sigmoid": true
            },
            {
                "_target_": "Invertd",
                "keys": "@image_key",
                "transform": "@preprocessing",
                "orig_keys": "image",
                "meta_keys": "pred_meta_dict",
                "nearest_interp": false,
                "to_tensor": true
            },
            {
                "_target_": "AsDiscreted",
                "keys": "@image_key",
                "threshold": 0.5
            },
            {
                "_target_": "Lambdad",
                "keys": "@image_key",
                "func": "$lambda x: torch.where(x[[2]] > 0, 4, torch.where(x[[0]] > 0, 1, torch.where(x[[1]] > 0, 2, 0)))"
            },
            {
                "_target_": "SaveImaged",
                "keys": "@image_key",
                "meta_keys": "pred_meta_dict",
                "output_dir": "@output_dir",
                "output_ext": "@output_ext",
                "output_dtype": "@output_dtype",
                "output_postfix": "@output_postfix",
                "separate_folder": "@separate_folder",
                "resample": false,
                "squeeze_end_dims": true
            }
        ]
    },
    "handlers": [
        {
            "_target_": "StatsHandler",
            "iteration_log": false
        }
    ],
    "evaluator": {
        "_target_": "SupervisedEvaluator",
        "device": "@device",
        "val_data_loader": "@dataloader",
        "network": "@network",
        "inferer": "@inferer",
        "postprocessing": "@postprocessing",
        "val_handlers": "@handlers",
        "amp": true
    },
    "checkpointloader": {
        "_target_": "CheckpointLoader",
        "load_path": "$@bundle_root + '/models/model.pt'",
        "load_dict": {
            "model": "@network"
        }
    },
    "initialize": [
        "$setattr(torch.backends.cudnn, 'benchmark', True)",
        "$@checkpointloader(@evaluator)"
    ],
    "run": [
        "$@evaluator.run()"
    ]
}
